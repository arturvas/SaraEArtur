---
import { weddingData } from '../../data/wedding-data.js';

const navItems = [
  { id: 'inicio', label: 'Início', icon: '💕' },
  { id: 'historia', label: 'Nossa História', icon: '📖' },
  { id: 'detalhes', label: 'Detalhes', icon: '📅' },
  { id: 'dress-code', label: 'Dress Code', icon: '👗' },
  { id: 'galeria', label: 'Galeria', icon: '📸' },
  { id: 'presentes', label: 'Presentes', icon: '🎁' }
];
---

<nav class="fixed top-0 left-0 right-0 z-50 bg-white/95 backdrop-blur-sm border-b border-slate-200">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16">
      <!-- Logo/Names -->
      <div class="flex-shrink-0">
        <h1 class="text-2xl font-bold text-slate-700" style="font-family: 'Dancing Script', cursive;">
          {weddingData.couple.groom} & {weddingData.couple.bride}
        </h1>
      </div>
      
      <!-- Navigation Items -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-4">
          {navItems.map((item) => (
            <a
              href={`#${item.id}`}
              class="nav-link px-3 py-2 rounded-md text-sm font-medium text-slate-600 hover:text-slate-900 hover:bg-slate-100 transition-all duration-200"
              data-section={item.id}
            >
              <span class="mr-1">{item.icon}</span>
              {item.label}
            </a>
          ))}
        </div>
      </div>
      
      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          type="button"
          class="mobile-menu-button inline-flex items-center justify-center p-2 rounded-md text-slate-600 hover:text-slate-900 hover:bg-slate-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-slate-500"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="sr-only">Abrir menu principal</span>
          <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Mobile menu -->
  <div class="mobile-menu hidden md:hidden">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t border-slate-200">
      {navItems.map((item) => (
        <a
          href={`#${item.id}`}
          class="nav-link block px-3 py-2 rounded-md text-base font-medium text-slate-600 hover:text-slate-900 hover:bg-slate-100 transition-all duration-200"
          data-section={item.id}
        >
          <span class="mr-2">{item.icon}</span>
          {item.label}
        </a>
      ))}
    </div>
  </div>
</nav>

<script>
  // Mobile menu toggle
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuButton = document.querySelector('.mobile-menu-button');
    const mobileMenu = document.querySelector('.mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', function() {
        mobileMenu.classList.toggle('hidden');
      });
    }
    
    // Smooth scrolling for navigation links
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          const offsetTop = targetElement.offsetTop - 80; // Account for fixed header
          window.scrollTo({
            top: offsetTop,
            behavior: 'smooth'
          });
        }
        
        // Close mobile menu if open
        if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('hidden');
        }
      });
    });
    
    // Active section highlighting
    function updateActiveSection() {
      const sections = document.querySelectorAll('section[id]');
      const scrollPos = window.scrollY + 100;
      
      sections.forEach(section => {
        const sectionTop = section.offsetTop;
        const sectionHeight = section.offsetHeight;
        const sectionId = section.getAttribute('id');
        
        if (scrollPos >= sectionTop && scrollPos < sectionTop + sectionHeight) {
          // Remove active class from all nav links
          navLinks.forEach(link => {
            link.classList.remove('bg-slate-200', 'text-slate-900');
            link.classList.add('text-slate-600');
          });
          
          // Add active class to current section nav link
          const activeLink = document.querySelector(`[data-section="${sectionId}"]`);
          if (activeLink) {
            activeLink.classList.add('bg-slate-200', 'text-slate-900');
            activeLink.classList.remove('text-slate-600');
          }
        }
      });
    }
    
    window.addEventListener('scroll', updateActiveSection);
    updateActiveSection(); // Initial call
  });
</script>

