---
interface Props {
    variant?: 'primary' | 'secondary' | 'outline' | 'success';
    size?: 'sm' | 'md' | 'lg';
    href?: string;
    class?: string;
}

const { variant = 'primary', size = 'md', href, class: className = '', ...restProps } = Astro.props;

const baseClasses =
    'inline-flex items-center justify-center rounded font-medium transition-all duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2';

const variantClasses = {
    primary: 'bg-slate-600 text-white hover:bg-slate-700 focus:ring-slate-500',
    secondary: 'bg-slate-100 text-slate-700 hover:bg-slate-200 focus:ring-slate-400',
    outline: 'border-2 border-slate-300 text-slate-700 hover:bg-slate-50 focus:ring-slate-400',
    success: 'bg-blue-500 text-white hover:bg-blue-600 focus:ring-blue-400',
    pix: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500',
};

const sizeClasses = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg',
};

const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`;
---

{
    href ? (
        <a href={href} class={classes} {...restProps}>
            <slot />
        </a>
    ) : (
        <button class={classes} {...restProps}>
            <slot />
        </button>
    )
}
