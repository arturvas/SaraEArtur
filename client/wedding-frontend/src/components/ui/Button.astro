---
interface Props {
  variant?: 'primary' | 'success' | 'pix';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  class?: string;
}

const { variant = 'primary', size = 'md', href, class: className = '', ...restProps } = Astro.props;

const baseClasses = [
  'inline-flex',
  'items-center',
  'justify-center',
  'rounded-lg',
  'border-2',
  'shadow-lg',
  'transition-all',
  'duration-300',
  'transform',
  'focus:outline-none',
  'focus:ring-2',
  'focus:ring-offset-2',
  'hover:scale-105',
  'hover:shadow-xl',
];

const variantClasses = {
  primary: [
    'bg-white',
    'text-slate-700',
    'hover:bg-slate-50',
    'focus:ring-slate-400',
    'border-slate-300',
    'transform-none',
    'hover:shadow-none',
  ].join(' '),
  success: [
    'bg-blue-500',
    'text-white',
    'hover:bg-blue-600',
    'focus:ring-blue-400',
    'border-slate-100',
    'hover:border-slate-400',
  ].join(' '),
  pix: [
    'bg-green-600',
    'text-white',
    'hover:bg-green-700',
    'focus:ring-green-500',
    'border-slate-100',
    'hover:border-slate-400',
  ].join(' '),
};

const sizeClasses = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2 text-base',
  lg: 'px-6 py-3 text-lg w-48',
};

const classes = [
  ...baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  className,
].filter(Boolean).join(' ');
---

{
  href ? (
    <a href={href} class={classes} {...restProps}>
      <slot />
    </a>
  ) : (
    <button class={classes} {...restProps}>
      <slot />
    </button>
  )
}
